import math
import os

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from handlers import filters_handlers as fh
from keyboards import user_keyboards as u_kb
from models.Boat import Boat
from models.DBManager import BoatDB
from models.Filter import Filter
from states import user_states

db = BoatDB(os.environ['database'])


async def start(message: Message, state: FSMContext):
    db.add_user((message.from_user.id,
                 message.from_user.first_name,
                 message.from_user.last_name,
                 message.from_user.username, None, None, None))
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–ò —Ç–∞–∫ —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É ; )\n–ñ–º–∏ üîé —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.\n"
                         "–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ üíæ.\n"
                         "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ ‚öô.",
                         reply_markup=u_kb.start_kb)
    await state.finish()


async def search(message: Message, state: FSMContext):
    await state.finish()
    filters = db.get_filters(message.from_user.id, columns="filter_name")
    if len(filters) <= 0:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∂–º–∏ /add_filter.",
                             reply_markup=u_kb.search_kb_1)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", reply_markup=u_kb.get_filters_kb(filters))
        await user_states.ApplyFilter.SetFilter.set()


async def find(message: Message, state: FSMContext):
    boat_filters = db.get_filters(message.from_user.id, message.text)
    if len(boat_filters) > 0:
        await message.answer("–ù–∞—á–Ω–µ–º!", reply_markup=ReplyKeyboardRemove())
        boats = db.get_boats(Filter.filter_to_dict(boat_filters[0]))
        if len(boats) == 0:
            await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–¥–∫–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É:\n"
                                 f"{Filter.show(Filter.filter_to_dict(boat_filters[0]))}", reply_markup=u_kb.start_kb)
            await state.finish()
        elif len(boats) > 10:
            for boat in boats[:10]:
                await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
            pages = math.ceil(len(boats) / 10)
            await message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {pages}", reply_markup=u_kb.next_kb)
            await user_states.ShowBoats.Next.set()
            await state.update_data({"boats": boats[10:], "pages": pages, "c_page": 1})
        else:
            for boat in boats:
                await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
            await message.answer("–ö–∞–∂–∏—Å—å –≤—Å–µ)", reply_markup=u_kb.start_kb)
            await state.finish()
    else:
        filters = db.get_filters(message.from_user.id, columns="filter_name")
        await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{message.text}".\n –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä.',
                             reply_markup=u_kb.get_filters_kb(filters))


async def add_filter(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å. –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ"
                         " /apply –∏–ª–∏ /apply_and_save, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä.", reply_markup=u_kb.add_filter_kb)
    await user_states.AddFilter.AddFilterParam.set()


async def new_filter(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å. –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ /save_filter",
                         reply_markup=u_kb.new_filter_kb)
    await user_states.NewFilter.AddFilterParam.set()


async def apply(message: Message, state: FSMContext):
    boat_filter = await state.get_data()
    await message.answer("–ù–∞—á–Ω–µ–º!", reply_markup=ReplyKeyboardRemove())
    boats = db.get_boats(boat_filter)
    if len(boats) == 0:
        await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–¥–∫–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É:\n{Filter.show(boat_filter)}",
                             reply_markup=u_kb.start_kb)
        await state.finish()
    elif len(boats) > 10:
        for boat in boats[:10]:
            await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
        pages = math.ceil(len(boats) / 10)
        await message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {pages}", reply_markup=u_kb.next_kb)
        await user_states.ShowBoats.Next.set()
        await state.update_data({"boats": boats[10:], "pages": pages, "c_page": 1})
    else:
        for boat in boats:
            await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
        await message.answer("–ö–∞–∂–∏—Å—å –≤—Å–µ)", reply_markup=u_kb.start_kb)
        await state.finish()


async def add_filter_name(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:")
    await user_states.AddFilter.SetFilterName.set()


async def apply_and_save(message: Message, state: FSMContext):
    await state.update_data({"filter_name": message.text})
    await state.update_data({"user_id": message.from_user.id})
    boat_filter = await state.get_data()
    db.add_filter(boat_filter)
    await message.answer("–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await message.answer("–ù–∞—á–Ω–µ–º!", reply_markup=ReplyKeyboardRemove())
    boats = db.get_boats(boat_filter)
    if len(boats) == 0:
        await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–¥–∫–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É:\n{Filter.show(boat_filter)}",
                             reply_markup=u_kb.start_kb)
        await state.finish()
    elif len(boats) > 10:
        for boat in boats[:10]:
            await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
        pages = math.ceil(len(boats) / 10)
        await message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {pages}", reply_markup=u_kb.next_kb)
        await user_states.ShowBoats.Next.set()
        await state.update_data({"boats": boats[10:], "pages": pages, "c_page": 1})
    else:
        for boat in boats:
            await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
        await message.answer("–ö–∞–∂–∏—Å—å –≤—Å–µ)", reply_markup=u_kb.start_kb)
        await state.finish()


async def new_filter_name(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:")
    await user_states.NewFilter.SetFilterName.set()


async def save_filter(message: Message, state: FSMContext):
    await state.update_data({"filter_name": message.text})
    await state.update_data({"user_id": message.from_user.id})
    boat_filter = await state.get_data()
    db.add_filter(boat_filter)
    await message.answer("–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=u_kb.settings_kb)
    await state.finish()


async def settings(message: Message, state: FSMContext):
    await message.answer("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞–∂–º–∏—Ç–µ üè†\n"
                         "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –∂–º–∏—Ç–µ / newüéõ\n"
                         "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∂–º–∏—Ç–µ / editüéõ", reply_markup=u_kb.settings_kb)
    await state.finish()


async def my_data(message: Message, state: FSMContext):
    await message.answer("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞–∂–º–∏—Ç–µ üè†\n"
                         "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã –∂–º–∏—Ç–µ üéõ\n"
                         "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–∂–º–∏—Ç–µ ‚≠ê", reply_markup=u_kb.my_data_kb)
    await state.finish()


async def menu(message: Message, state: FSMContext):
    await message.answer("üîé -  –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\nüíæ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n‚öô - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                         reply_markup=u_kb.start_kb)
    await state.finish()


async def my_filters(message: Message):
    filters = db.get_filters(message.from_user.id, columns="filter_name")
    if len(filters) > 0:
        await message.answer("–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=u_kb.get_my_filters_kb(filters))
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã")


async def my_favorites(message: Message, state: FSMContext):
    favorites = db.get_favorites(message.from_user.id)
    if len(favorites) > 0:
        await message.answer("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ:")
        if len(favorites) > 10:
            for boat in favorites[:10]:
                await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.favorites_kb)
            pages = math.ceil(len(favorites) / 10)
            await message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {pages}", reply_markup=u_kb.next_kb)
            await user_states.ShowBoats.Next.set()
            await state.update_data({"boats": favorites[10:], "pages": pages, "c_page": 1})
        else:
            for boat in favorites:
                await message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.favorites_kb)
            await message.answer("–ö–∞–∂–∏—Å—å –≤—Å–µ)")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")


async def show_filter(callback_query: CallbackQuery):
    raw_filters = db.get_filters(callback_query.from_user.id, callback_query.data)
    if len(raw_filters) > 0:
        boat_filter = Filter.filter_to_dict(raw_filters[0])
        await callback_query.answer(Filter.show(boat_filter), show_alert=True)
    else:
        await callback_query.answer(f"–§–∏–ª—å—Ç—Ä {callback_query.data} –Ω–µ –Ω–∞–π–¥–µ–Ω (", show_alert=True)


async def add_to_favorites(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(u_kb.boat_kb_2)
    link = callback_query.message.entities[len(callback_query.message.entities) - 1].url
    user_id = callback_query.message.chat.id
    db.add_favorites(user_id, link)


async def cancel_favorites(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(u_kb.boat_kb)
    link = callback_query.message.entities[len(callback_query.message.entities) - 1].url
    user_id = callback_query.message.chat.id
    db.delete_favorites(user_id, link)


async def delete_from_favorites(callback_query: CallbackQuery):
    link = callback_query.message.entities[len(callback_query.message.entities) - 1].url
    user_id = callback_query.message.chat.id
    await callback_query.message.delete()
    db.delete_favorites(user_id, link)


async def delete_boat(callback_query: CallbackQuery):
    # print("delete")
    await callback_query.message.delete()


async def next_page(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()  # "boats"
    boats = data.get("boats")
    pages = data.get("pages")
    c_page = data.get("c_page")
    c_page += 1
    await callback_query.message.edit_reply_markup(None)
    if len(boats) > 10:
        for boat in boats[:10]:
            await callback_query.message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
        await callback_query.message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü–∞ {c_page} –∏–∑ {pages}", reply_markup=u_kb.next_kb)
        await state.update_data({"boats": boats[10:], "c_page": c_page})
    else:
        for boat in boats:
            await callback_query.message.answer(Boat.show(boat), parse_mode="HTML", reply_markup=u_kb.boat_kb)
        await callback_query.message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü–∞ {c_page} –∏–∑ {pages}\n–ö–∞–∂–∏—Å—å –≤—Å–µ)", reply_markup=u_kb.start_kb)
        await state.finish()


async def cancel_page(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(None)
    await state.finish()
    await callback_query.message.answer("–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω...", reply_markup=u_kb.start_kb)


async def print_message(message: Message):
    print(message)


async def empty_callback(callback_query: CallbackQuery):
    await callback_query.answer("–î–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands="start", state="*")
    dp.register_message_handler(menu, lambda m: m.text == "üè†" or m.text == "/menu", state="*")
    dp.register_message_handler(search, lambda m: m.text == "üîé" or m.text == "/search", state="*")
    dp.register_message_handler(settings, lambda m: m.text == "‚öô" or m.text == "/settings", state="*")
    dp.register_message_handler(my_data, lambda m: m.text == "üíæ" or m.text == "/my_data", state="*")
    dp.register_message_handler(add_filter, commands=["add_filter", "addüéõ"],
                                state=(user_states.ApplyFilter.SetFilter, None))
    dp.register_message_handler(find, state=user_states.ApplyFilter.SetFilter)

    dp.register_message_handler(fh.back_to_filter_settings, lambda m: m.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                                state=(user_states.AddFilter.all_states + user_states.NewFilter.all_states))

    dp.register_message_handler(fh.add_boat_name, commands="boat_name",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_boat_name,
                                state=(user_states.AddFilter.SetBoatName, user_states.NewFilter.SetBoatName))
    dp.register_message_handler(fh.add_location, commands="location",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_location,
                                state=(user_states.AddFilter.SetLocation, user_states.NewFilter.SetLocation))

    dp.register_message_handler(fh.add_price, commands="price",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_price, state=(user_states.AddFilter.AddPrice, user_states.NewFilter.AddPrice))
    dp.register_message_handler(fh.set_min_price,
                                state=(user_states.AddFilter.SetMinPrice, user_states.NewFilter.SetMinPrice))
    dp.register_message_handler(fh.set_max_price,
                                state=(user_states.AddFilter.SetMaxPrice, user_states.NewFilter.SetMaxPrice))

    dp.register_message_handler(fh.add_hull_material, commands="hull_material",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_hull_material,
                                state=(user_states.AddFilter.SetHullMaterial, user_states.NewFilter.SetHullMaterial))
    dp.register_message_handler(fh.add_category, commands="category",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_category,
                                state=(user_states.AddFilter.SetCategory, user_states.NewFilter.SetCategory))
    dp.register_message_handler(fh.add_fuel_type, commands="fuel_type",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_fuel_type,
                                state=(user_states.AddFilter.SetFuelType, user_states.NewFilter.SetFuelType))
    dp.register_message_handler(fh.add_boat_type, commands="boat_type",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_boat_type,
                                state=(user_states.AddFilter.SetBoatType, user_states.NewFilter.SetBoatType))

    dp.register_message_handler(fh.add_length, commands="length",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_length, state=(user_states.AddFilter.AddLength, user_states.NewFilter.AddLength))
    dp.register_message_handler(fh.set_min_length,
                                state=(user_states.AddFilter.SetMinLength, user_states.NewFilter.SetMinLength))
    dp.register_message_handler(fh.set_max_length,
                                state=(user_states.AddFilter.SetMaxLength, user_states.NewFilter.SetMaxLength))

    dp.register_message_handler(fh.add_year, commands="year",
                                state=(user_states.AddFilter.AddFilterParam, user_states.NewFilter.AddFilterParam))
    dp.register_message_handler(fh.set_year, state=(user_states.AddFilter.AddYear, user_states.NewFilter.AddYear))
    dp.register_message_handler(fh.set_min_year,
                                state=(user_states.AddFilter.SetMinYear, user_states.NewFilter.SetMinYear))
    dp.register_message_handler(fh.set_max_year,
                                state=(user_states.AddFilter.SetMaxYear, user_states.NewFilter.SetMaxYear))

    dp.register_message_handler(apply, commands="apply", state=user_states.AddFilter.AddFilterParam)
    dp.register_message_handler(add_filter_name, commands="apply_and_save", state=user_states.AddFilter.AddFilterParam)
    dp.register_message_handler(apply_and_save, state=user_states.AddFilter.SetFilterName)
    dp.register_message_handler(new_filter, commands=["new_filter", "newüéõ"])
    dp.register_message_handler(new_filter_name, commands="save_filter", state=user_states.NewFilter.AddFilterParam)
    dp.register_message_handler(save_filter, state=user_states.NewFilter.SetFilterName)
    dp.register_message_handler(my_filters, lambda m: m.text == "üéõ" or m.text == "/my_filters")
    dp.register_message_handler(my_favorites, lambda m: m.text == "‚≠ê" or m.text == "/my_favorites")

    dp.register_message_handler(print_message)

    dp.register_callback_query_handler(add_to_favorites, lambda c: c.data == "add_to_favorites", state="*")
    dp.register_callback_query_handler(cancel_favorites, lambda c: c.data == "cancel_favorites", state="*")
    dp.register_callback_query_handler(delete_from_favorites, lambda c: c.data == "delete_from_favorites", state="*")
    dp.register_callback_query_handler(delete_boat, text="delete_boat", state="*")
    # –ò–õ–ò –ú–û–ñ–ù–û –¢–ê–ö dp.register_callback_query_handler(delete_boat, lambda c: c.data == "delete_boat")
    dp.register_callback_query_handler(next_page, text="next_page", state=user_states.ShowBoats.Next)
    dp.register_callback_query_handler(cancel_page, text="cancel_page", state=user_states.ShowBoats.Next)
    dp.register_callback_query_handler(show_filter,
                                       lambda c: not (c.data == "next_page") and not (c.data == "cancel_page"),
                                       state="*")  # –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    dp.register_callback_query_handler(empty_callback, state="*")
